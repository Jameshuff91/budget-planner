name: Visual Regression Tests

on:
  pull_request:
    branches: [master, main, develop]
  workflow_dispatch:

jobs:
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Start server
        run: |
          npm start &
          npx wait-on http://localhost:3000

      - name: Run visual tests
        run: |
          # Create visual test script
          cat > visual-tests.spec.ts << 'EOF'
          import { test, expect } from '@playwright/test';

          const pages = [
            { name: 'home', path: '/' },
            { name: 'dashboard', path: '/' }, // After data load
          ];

          const viewports = [
            { name: 'desktop', width: 1920, height: 1080 },
            { name: 'tablet', width: 768, height: 1024 },
            { name: 'mobile', width: 375, height: 667 },
          ];

          for (const pageInfo of pages) {
            for (const viewport of viewports) {
              test(`${pageInfo.name} - ${viewport.name}`, async ({ page }) => {
                await page.setViewportSize(viewport);
                await page.goto(`http://localhost:3000${pageInfo.path}`);
                
                // Wait for page to be fully loaded
                await page.waitForLoadState('networkidle');
                
                // Special handling for dashboard
                if (pageInfo.name === 'dashboard') {
                  // Upload sample data
                  const fileInput = await page.locator('input[type="file"]');
                  await fileInput.setInputFiles('./sample-data.csv');
                  await page.waitForTimeout(2000);
                }
                
                // Take screenshot
                await expect(page).toHaveScreenshot(
                  `${pageInfo.name}-${viewport.name}.png`,
                  {
                    fullPage: true,
                    animations: 'disabled',
                  }
                );
              });
            }
          }

          // Component-specific visual tests
          test('spending chart', async ({ page }) => {
            await page.goto('http://localhost:3000');
            
            // Upload sample data
            const fileInput = await page.locator('input[type="file"]');
            await fileInput.setInputFiles('./sample-data.csv');
            await page.waitForTimeout(2000);
            
            // Screenshot specific chart
            const chart = await page.locator('[data-testid="spending-by-category"]');
            await expect(chart).toHaveScreenshot('spending-by-category.png');
          });
          EOF

          # Create sample data for tests
          cat > sample-data.csv << 'EOF'
          Date,Description,Amount,Category
          2024-01-15,Grocery Store,-150.00,Groceries
          2024-01-16,Gas Station,-45.00,Transportation
          2024-01-17,Restaurant,-35.00,Dining
          2024-01-18,Salary,3000.00,Income
          EOF

          # Run visual regression tests
          npx playwright test visual-tests.spec.ts --update-snapshots

      - name: Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ Visual Regression Tests Failed

            Visual differences were detected. Please review the screenshots in the artifacts.

            To update the baseline images, run:
            \`\`\`bash
            npx playwright test --update-snapshots
            \`\`\`
            `;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
